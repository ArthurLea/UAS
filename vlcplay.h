#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CVlcplay wrapper class

class CVlcplay : public CWnd
{
protected:
	DECLARE_DYNCREATE(CVlcplay)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xE23FE9C6, 0x778E, 0x49D4, { 0xB5, 0x37, 0x38, 0xFC, 0xDE, 0x48, 0x87, 0xD8 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
//enum
//{
//    VLCPlayListInsert = 1,
//    VLCPlayListInsertAndGo = 9,
//    VLCPlayListReplace = 2,
//    VLCPlayListReplaceAndGo = 10,
//    VLCPlayListAppend = 4,
//    VLCPlayListAppendAndGo = 12,
//    VLCPlayListCheckInsert = 16
//}VLCPlaylistMode;
//enum
//{
//    VLCPlayListInsert = 1,
//    VLCPlayListInsertAndGo = 9,
//    VLCPlayListReplace = 2,
//    VLCPlayListReplaceAndGo = 10,
//    VLCPlayListAppend = 4,
//    VLCPlayListAppendAndGo = 12,
//    VLCPlayListCheckInsert = 16
//}VLCPlaylistMode;
//

// Operations
public:

// IVLCControl

// Functions
//

	BOOL get_Visible()
	{
		BOOL result;
		InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Visible(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void play()
	{
		InvokeHelper(0x60020002, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void pause()
	{
		InvokeHelper(0x60020003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void stop()
	{
		InvokeHelper(0x60020004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL get_Playing()
	{
		BOOL result;
		InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	float get_Position()
	{
		float result;
		InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
		return result;
	}
	void put_Position(float newValue)
	{
		static BYTE parms[] = VTS_R4 ;
		InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Time()
	{
		long result;
		InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Time(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void shuttle(long seconds)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x6002000a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, seconds);
	}
	void fullscreen()
	{
		InvokeHelper(0x6002000b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_Length()
	{
		long result;
		InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void playFaster()
	{
		InvokeHelper(0x6002000d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void playSlower()
	{
		InvokeHelper(0x6002000e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_Volume()
	{
		long result;
		InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Volume(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void toggleMute()
	{
		InvokeHelper(0x60020011, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void setVariable(LPCTSTR name, VARIANT value)
	{
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x60020012, DISPATCH_METHOD, VT_EMPTY, NULL, parms, name, &value);
	}
	VARIANT getVariable(LPCTSTR name)
	{
		VARIANT result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x60020013, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, name);
		return result;
	}
	void addTarget(LPCTSTR uri, VARIANT options, long mode, long Position)
	{
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_I4 VTS_I4 ;
		InvokeHelper(0x60020014, DISPATCH_METHOD, VT_EMPTY, NULL, parms, uri, &options, mode, Position);
	}
	long get_PlaylistIndex()
	{
		long result;
		InvokeHelper(0x60020015, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_PlaylistCount()
	{
		long result;
		InvokeHelper(0x60020016, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void playlistNext()
	{
		InvokeHelper(0x60020017, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void playlistPrev()
	{
		InvokeHelper(0x60020018, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void playlistClear()
	{
		InvokeHelper(0x60020019, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	CString get_VersionInfo()
	{
		CString result;
		InvokeHelper(0x6002001a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_MRL()
	{
		CString result;
		InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_MRL(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoPlay()
	{
		BOOL result;
		InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoPlay(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoLoop()
	{
		BOOL result;
		InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoLoop(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

// Properties
//



};
